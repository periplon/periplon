name: TUI CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/tui/**'
      - 'src/bin/dsl_tui.rs'
      - '.github/workflows/tui_ci.yml'
      - 'Cargo.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/tui/**'
      - 'src/bin/dsl_tui.rs'
      - '.github/workflows/tui_ci.yml'
      - 'Cargo.toml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build and test TUI binary
  build-tui:
    name: Build TUI (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-tui-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build TUI binary
        run: cargo build --verbose --bin periplon-tui --features tui

      - name: Build TUI binary (release)
        run: cargo build --release --bin periplon-tui --features tui

      - name: Run TUI tests
        run: cargo test --features tui --lib tui

      - name: Run TUI integration tests
        run: cargo test --features tui --test tui_integration_tests
        continue-on-error: true

      - name: Test TUI binary execution
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./target/release/periplon-tui.exe --version
          else
            ./target/release/periplon-tui --version
          fi

      - name: Upload TUI binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: periplon-tui-${{ matrix.os }}
          path: |
            target/release/periplon-tui
            target/release/periplon-tui.exe
          if-no-files-found: ignore

  # Cross-platform TUI builds
  cross-compile-tui:
    name: Cross-compile TUI (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: periplon-tui
            asset_name: periplon-tui-linux-x86_64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: periplon-tui
            asset_name: periplon-tui-linux-aarch64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: periplon-tui
            asset_name: periplon-tui-macos-x86_64

          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: periplon-tui
            asset_name: periplon-tui-macos-aarch64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: periplon-tui.exe
            asset_name: periplon-tui-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-tui-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build TUI binary for target
        run: cargo build --release --bin periplon-tui --features tui --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || true

      - name: Calculate checksum (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          shasum -a 256 ${{ matrix.artifact_name }} > ${{ matrix.asset_name }}.sha256

      - name: Calculate checksum (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          $hash = Get-FileHash -Path ${{ matrix.artifact_name }} -Algorithm SHA256
          "$($hash.Hash)  ${{ matrix.artifact_name }}" | Out-File -FilePath ${{ matrix.asset_name }}.sha256

      - name: Upload cross-compiled TUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
            target/${{ matrix.target }}/release/${{ matrix.asset_name }}.sha256
          if-no-files-found: error
          retention-days: 30

  # TUI code quality checks
  tui-quality:
    name: TUI Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check TUI formatting
        run: cargo fmt --all -- --check

      - name: Clippy TUI code
        run: cargo clippy --features tui --bin periplon-tui -- -D warnings

      - name: Check TUI documentation
        run: cargo doc --no-deps --features tui --document-private-items

  # Summary job
  tui-ci-success:
    name: TUI CI Success
    needs: [build-tui, cross-compile-tui, tui-quality]
    runs-on: ubuntu-latest
    steps:
      - name: Mark TUI CI as successful
        run: echo "All TUI CI checks passed!"
