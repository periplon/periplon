//! Lock File Demo
//!
//! This example demonstrates the lock file functionality for predefined tasks,
//! showing how to:
//! - Generate lock files from resolved dependencies
//! - Load and validate lock files
//! - Verify task integrity with checksums
//! - Handle stale lock files

use periplon_sdk::dsl::predefined_tasks::schema::TaskReference;
use periplon_sdk::dsl::predefined_tasks::{
    compute_task_checksum, generate_lock_file, validate_lock_file, AgentTemplate,
    DependencyResolver, LocalSourceResolver, LockFile, PredefinedTask, PredefinedTaskMetadata,
    PredefinedTaskSpec, ResolvedTask, TaskApiVersion, TaskDependency, TaskKind, LOCK_FILE_NAME,
};
use periplon_sdk::dsl::schema::PermissionsSpec;
use std::collections::HashMap;
use tempfile::TempDir;

fn create_sample_task(name: &str, version: &str, deps: Vec<(&str, &str)>) -> PredefinedTask {
    PredefinedTask {
        api_version: TaskApiVersion::V1,
        kind: TaskKind::PredefinedTask,
        metadata: PredefinedTaskMetadata {
            name: name.to_string(),
            version: version.to_string(),
            description: Some(format!("Sample task: {}", name)),
            author: Some("Demo Author".to_string()),
            license: Some("MIT".to_string()),
            repository: None,
            tags: vec!["demo".to_string()],
        },
        spec: PredefinedTaskSpec {
            agent_template: AgentTemplate {
                description: format!("Execute {}", name),
                model: Some("claude-sonnet-4-5".to_string()),
                system_prompt: None,
                tools: vec!["Read".to_string(), "Write".to_string()],
                permissions: PermissionsSpec::default(),
                max_turns: Some(10),
            },
            inputs: HashMap::new(),
            outputs: HashMap::new(),
            dependencies: deps
                .into_iter()
                .map(|(n, v)| TaskDependency {
                    name: n.to_string(),
                    version: v.to_string(),
                    optional: false,
                })
                .collect(),
            examples: vec![],
        },
    }
}

fn demo_generate_lock_file() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== Demo 1: Generate Lock File ===\n");

    // Create a dependency graph
    let task_a = create_sample_task("task-a", "1.0.0", vec![]);
    let task_b = create_sample_task("task-b", "2.1.0", vec![("task-a", "^1.0.0")]);
    let task_c = create_sample_task(
        "task-c",
        "1.5.0",
        vec![("task-a", "^1.0.0"), ("task-b", "^2.0.0")],
    );

    // Resolve dependencies
    let mut resolver = DependencyResolver::new();
    resolver.add_task(task_a);
    resolver.add_task(task_b);
    resolver.add_task(task_c);

    let task_ref = TaskReference {
        name: "task-c".to_string(),
        version: "1.5.0".to_string(),
    };

    let resolved = resolver.resolve(&task_ref)?;

    println!("Resolved {} tasks in dependency order:", resolved.len());
    for (i, task) in resolved.iter().enumerate() {
        println!("  {}. {} @ {}", i + 1, task.name, task.version);
        for (dep_name, dep_version) in &task.dependencies {
            println!("     └─ {} @ {}", dep_name, dep_version);
        }
    }

    // Generate lock file
    let temp_dir = TempDir::new()?;
    let source_resolver = LocalSourceResolver::new(temp_dir.path().to_path_buf());
    let lock_file = generate_lock_file(&resolved, &source_resolver)?;

    println!("\nGenerated lock file:");
    println!("  Version: {}", lock_file.version);
    println!("  Generated at: {}", lock_file.generated_at);
    println!("  Generated by: {}", lock_file.generated_by);
    println!("  Task count: {}", lock_file.task_count());

    println!("\nLocked tasks:");
    for (name, locked) in &lock_file.tasks {
        println!("  - {} @ {}", name, locked.version);
        println!("    Checksum: {}", locked.checksum);
        println!("    Resolved at: {}", locked.resolved_at);
        match &locked.source {
            periplon_sdk::dsl::predefined_tasks::lockfile::TaskSource::Local { path } => {
                println!("    Source: local ({})", path);
            }
            _ => {}
        }
    }

    // Save lock file
    let lock_path = temp_dir.path().join(LOCK_FILE_NAME);
    lock_file.save(&lock_path)?;
    println!("\n✓ Lock file saved to: {}", lock_path.display());

    Ok(())
}

fn demo_validate_lock_file() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== Demo 2: Validate Lock File ===\n");

    // Create initial tasks and lock file
    let task_a = create_sample_task("task-a", "1.0.0", vec![]);
    let task_b = create_sample_task("task-b", "2.0.0", vec![("task-a", "^1.0.0")]);

    let mut resolver = DependencyResolver::new();
    resolver.add_task(task_a.clone());
    resolver.add_task(task_b.clone());

    let task_ref = TaskReference {
        name: "task-b".to_string(),
        version: "2.0.0".to_string(),
    };

    let resolved = resolver.resolve(&task_ref)?;

    let temp_dir = TempDir::new()?;
    let source_resolver = LocalSourceResolver::new(temp_dir.path().to_path_buf());
    let lock_file = generate_lock_file(&resolved, &source_resolver)?;

    // Validate with same dependencies (should pass)
    println!("Validating lock file against same dependencies...");
    let result = validate_lock_file(&lock_file, &resolved)?;

    if result.is_valid() {
        println!("✓ Lock file is valid!");
    } else {
        println!("✗ Lock file validation failed:");
        println!("{}", result.summary());
    }

    // Check if stale
    if lock_file.is_stale(&resolved) {
        println!("  ⚠ Lock file is stale");
    } else {
        println!("  ✓ Lock file is up-to-date");
    }

    // Now update task-b to depend on newer task-a and validate again
    println!("\nUpdating task-b to version 2.1.0 with dependency on task-a@2.0.0...");
    let task_a_v2 = create_sample_task("task-a", "2.0.0", vec![]);
    let task_b_v2 = create_sample_task("task-b", "2.1.0", vec![("task-a", "^2.0.0")]);

    let mut resolver2 = DependencyResolver::new();
    resolver2.add_task(task_a_v2);
    resolver2.add_task(task_b_v2);

    let task_ref2 = TaskReference {
        name: "task-b".to_string(),
        version: "2.1.0".to_string(),
    };

    let resolved2 = resolver2.resolve(&task_ref2)?;

    println!("Validating lock file against updated dependencies...");
    let result2 = validate_lock_file(&lock_file, &resolved2)?;

    if result2.is_valid() {
        println!("✓ Lock file is valid!");
    } else {
        println!("✗ Lock file validation failed:");
        println!("{}", result2.summary());
    }

    if lock_file.is_stale(&resolved2) {
        println!("  ⚠ Lock file is stale - needs regeneration");
    }

    Ok(())
}

fn demo_checksum_verification() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== Demo 3: Checksum Verification ===\n");

    let task = create_sample_task("test-task", "1.0.0", vec![]);

    // Compute checksum
    let checksum = compute_task_checksum(&task)?;
    println!("Task checksum: {}", checksum);

    // Create lock file
    let resolved = vec![ResolvedTask {
        name: task.metadata.name.clone(),
        version: task.metadata.version.clone(),
        task: task.clone(),
        dependencies: HashMap::new(),
    }];

    let temp_dir = TempDir::new()?;
    let source_resolver = LocalSourceResolver::new(temp_dir.path().to_path_buf());
    let lock_file = generate_lock_file(&resolved, &source_resolver)?;

    // Verify original task
    println!("\nVerifying original task...");
    match lock_file.verify_task("test-task", &task) {
        Ok(_) => println!("✓ Checksum verification passed"),
        Err(e) => println!("✗ Checksum verification failed: {}", e),
    }

    // Modify task and try to verify
    println!("\nModifying task description...");
    let mut modified_task = task.clone();
    modified_task.metadata.description = Some("Modified description".to_string());

    println!("Verifying modified task...");
    match lock_file.verify_task("test-task", &modified_task) {
        Ok(_) => println!("✓ Checksum verification passed"),
        Err(e) => println!("✗ Checksum verification failed (expected): {}", e),
    }

    // Show the checksums
    let modified_checksum = compute_task_checksum(&modified_task)?;
    println!("\nChecksum comparison:");
    println!("  Original:  {}", checksum);
    println!("  Modified:  {}", modified_checksum);
    println!("  Match: {}", checksum == modified_checksum);

    Ok(())
}

fn demo_lock_file_persistence() -> Result<(), Box<dyn std::error::Error>> {
    println!("\n=== Demo 4: Lock File Persistence ===\n");

    // Create and save a lock file
    let task = create_sample_task("persist-task", "1.0.0", vec![]);
    let resolved = vec![ResolvedTask {
        name: task.metadata.name.clone(),
        version: task.metadata.version.clone(),
        task: task.clone(),
        dependencies: HashMap::new(),
    }];

    let temp_dir = TempDir::new()?;
    let source_resolver = LocalSourceResolver::new(temp_dir.path().to_path_buf());
    let lock_file = generate_lock_file(&resolved, &source_resolver)?;

    let lock_path = temp_dir.path().join(LOCK_FILE_NAME);
    println!("Saving lock file to: {}", lock_path.display());
    lock_file.save(&lock_path)?;
    println!("✓ Saved");

    // Load it back
    println!("\nLoading lock file...");
    let loaded = LockFile::load(&lock_path)?;
    println!("✓ Loaded");

    println!("\nLoaded lock file info:");
    println!("  Version: {}", loaded.version);
    println!("  Tasks: {}", loaded.task_count());

    // Verify the task exists
    if let Some(locked_task) = loaded.get_task("persist-task") {
        println!("\nTask 'persist-task' details:");
        println!("  Version: {}", locked_task.version);
        println!("  Checksum: {}", locked_task.checksum);
        println!("  Resolved at: {}", locked_task.resolved_at);
    }

    // Show YAML content
    println!("\nLock file YAML content:");
    let content = std::fs::read_to_string(&lock_path)?;
    println!("{}", content);

    Ok(())
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("╔═══════════════════════════════════════════════════════════╗");
    println!("║         Predefined Tasks Lock File Demo                  ║");
    println!("╚═══════════════════════════════════════════════════════════╝");

    demo_generate_lock_file()?;
    demo_validate_lock_file()?;
    demo_checksum_verification()?;
    demo_lock_file_persistence()?;

    println!("\n=== All Demos Complete ===\n");

    Ok(())
}
